---
- name: Initialize Fedora Workstation
  hosts: localhost
  connection: local
  become: yes
  vars:
    pyenv_root: "{{ ansible_env.HOME }}/.pyenv"
  tasks:
    - name: Set Fedora version variable
      set_fact:
        fedora_version: "{{ ansible_distribution_version }}"

    # install nvidia drivers
    # https://rpmfusion.org/Configuration
    # https://idroot.us/install-nvidia-drivers-fedora-42/
    - name: Install Free and Nonfree Repositories for RPM Fusion
      dnf:
        name: 
          - https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ fedora_version }}.noarch.rpm 
          - https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ fedora_version }}.noarch.rpm
        state: present

    - name: Install NVIDIA drivers
      dnf:
        name:
          - akmod-nvidia
          - xorg-x11-drv-nvidia-cuda
          - xorg-x11-drv-nvidia-power # for suspend
        state: present

    - name: Enable nvidia-{suspend,resume,hibernate} services
      ansible.builtin.systemd:
        name: "nvidia-{{ item }}.service"
        enabled: yes
      loop:
        - suspend
        - resume
        - hibernate

    # install packages (dnf)
    - name: Install packages with dnf
      dnf:
        name:
          # - exiftool
          # dev tools
          - android-tools
          - gcc
          - make
          - zlib-devel
          - bzip2
          - bzip2-devel
          - readline-devel
          - sqlite
          - sqlite-devel
          - openssl-devel
          - xz
          - xz-devel
          - libffi-devel
          - findutils
          - tk-devel
          - libuuid-devel
        state: present
    
    # install vscode (dnf)
    - name: Add Microsoft GPG key
      rpm_key:
        key: https://packages.microsoft.com/keys/microsoft.asc
        state: present

    - name: Add VS Code repository
      copy:
        dest: /etc/yum.repos.d/vscode.repo
        content: |
          [code]
          name=Visual Studio Code
          baseurl=https://packages.microsoft.com/yumrepos/vscode
          enabled=1
          gpgcheck=1
          gpgkey=https://packages.microsoft.com/keys/microsoft.asc

    - name: Install Visual Studio Code
      dnf:
        name: code
        state: present

    - name: Add the Flathub flatpak remote (system-wide)
      community.general.flatpak_remote:
        name: flathub
        state: present
        flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
        method: system
    
    # install flatpaks
    - name: Install applications with flatpak
      community.general.flatpak:
        name: 
          - com.spotify.Client
          - org.gimp.GIMP
          - io.mpv.Mpv
          - com.github.tchx84.Flatseal
        state: present
    
    # install pyenv
    - name: Remove any existing pyenv installation
      file:
        path: "{{ pyenv_root }}"
        state: absent

    - name: Install pyenv via official installer
      shell: "curl -fsSL https://pyenv.run | bash"
      args:
        executable: /bin/bash

    - name: Ensure pyenv root is exported in .bashrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'export PYENV_ROOT="{{ pyenv_root }}"'
        create: yes

    - name: Add pyenv bin to PATH in .bashrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: '[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"'
        create: yes

    - name: Initialize pyenv in .bashrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'eval "$(pyenv init - bash)"'
        create: yes

    - name: Ensure pyenv root is exported in .bash_profile
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bash_profile"
        line: 'export PYENV_ROOT="{{ pyenv_root }}"'
        create: yes

    - name: Add pyenv bin to PATH in .bash_profile
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bash_profile"
        line: '[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"'
        create: yes

    - name: Initialize pyenv in .bash_profile
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bash_profile"
        line: 'eval "$(pyenv init - bash)"'
        create: yes

    - name: Reload shell to apply changes
      shell: exec "$SHELL"
      args:
        executable: /bin/bash
      changed_when: false
    
    # install uv
    - name: Run uv standalone installer
      shell: "curl -LsSf https://astral.sh/uv/install.sh | sh"
      args:
        executable: /bin/bash
      register: uv_installer
      changed_when: uv_installer.rc == 0 and "'uv' installed" in uv_installer.stdout

    - name: Fail if uv installer returned an error
      fail:
        msg: "uv installation failed: {{ uv_installer.stderr }}"
      when: uv_installer.rc != 0

    - name: Ensure ~/.local/bin exists
      file:
        path: "{{ ansible_env.HOME }}/.local/bin"
        state: directory
        mode: '0755'

    - name: Add ~/.local/bin to PATH in .bashrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'export PATH="$HOME/.local/bin:$PATH"'
        create: yes
        state: present

    - name: Enable uv bash completion
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'eval "$(uv generate-shell-completion bash)"'
        create: yes
        state: present

        


 



